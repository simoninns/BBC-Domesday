
AND dumpit( byte.pointer, data.size, nos.per.line ) = VALOF
$( LET req.vec = 0
   LET no.of.lines = ?
   LET buffer = ?
   LET success = FALSE
   LET vec.size = data.size / bytesperword
   LET data.pointer = byte.pointer / bytesperword
   LET convert.line = ?
   LET stepsize = ?
   LET numbers  = ?

   // decide which conversion we're going to use

   TEST nos.per.line = m.ut.16bit.nos.per.line
      THEN $( convert.line := do.16.line
              stepsize := nos.per.line
           $)
      ELSE $( convert.line := g.ud.do.32.line
              stepsize := (4/bytesperword)*nos.per.line
           $)

   // calculate number of numbers
   numbers := (vec.size * nos.per.line) / stepsize

   // calculate required vector size

   IF (numbers REM nos.per.line) >0
      THEN req.vec := 1
   no.of.lines := req.vec + numbers / nos.per.line
   req.vec     := no.of.lines * m.ut.words.per.line

   TEST req.vec >= MAXVEC() // do it line by line
      THEN $( LET tvec = VEC( m.ut.words.per.line ) // one line = 20 words
              buffer  := tvec
              FOR i = 1 TO no.of.lines DO
                 $( LET output.pointer = buffer
                    convert.line ( output.pointer, data.pointer, numbers )
                    numbers := numbers - nos.per.line
                    data.pointer := data.pointer + stepsize
                    success := writeit ( buffer * bytesperword, 
                                                          m.ut.chars.per.line )
                    IF success ~= m.ut.success  // early exit
                       THEN RESULTIS success
                 $)
           $)

      ELSE $( LET output.pointer = ?
              buffer   := GETVEC( req.vec )
              output.pointer := buffer
              FOR i = 1 TO no.of.lines DO
                 $(
                    convert.line ( output.pointer, data.pointer, numbers )
                    numbers := numbers - nos.per.line
                    output.pointer := output.pointer + m.ut.words.per.line
                    data.pointer := data.pointer + stepsize
                 $)
              success := writeit ( buffer * bytesperword, 
                                                    req.vec * bytesperword )
              FREEVEC( buffer )
           $)
      RESULTIS success
$)

AND do.16.line ( out.ptr, src.ptr, numbers ) BE
$( LET byteoff = 0  // byte offset into output vector
   LET limit   = m.ut.16bit.nos.per.line

   IF numbers < m.ut.16bit.nos.per.line THEN limit := numbers

   FOR i = 0 TO m.ut.chars.per.line DO out.ptr%i := ' '

   FOR j = 1 TO limit DO
   $( LET number = src.ptr!0
      LET negative = FALSE
      LET digits   = 0
      IF number < 0 THEN $( number := -number; negative := TRUE $)

      FOR j = 5 TO 1 BY -1 DO  // convert to string
      $( out.ptr%(byteoff+j) := (number REM 10) + '0'
         number := number / 10
         digits := digits + 1
         IF number = 0 THEN BREAK    // early exit
      $)

      IF negative THEN out.ptr%(byteoff+5-digits) := '-' // add minus sign

      byteoff := byteoff + m.ut.chars16
      src.ptr := src.ptr + 1
   $)
   out.ptr%(m.ut.chars.per.line-1) := m.ut.CR
$)

AND g.ud.do.32.line ( out.ptr, src.ptr, numbers ) BE
$( LET byteoff = 0 // byte offset into o/p vector
   LET limit   = m.ut.32bit.nos.per.line

   IF numbers < m.ut.32bit.nos.per.line THEN limit := numbers

   FOR i = 0 TO m.ut.chars.per.line DO out.ptr%i := ' '

   FOR i = 1 TO limit DO
   $( LET ten      = vec 1
      LET zero     = vec 1
      LET negative = FALSE      // flag negative number
      LET digits   = 0          // count of digits
      LET fraction = VEC 1
      LET number   = VEC 1      // copy of the number

      G.ut.set32(10, 0, ten) // 32 bit value of 10
      G.ut.set32(0, 0, zero) // 32 bit value of 10
      // check for negative number
      TEST (G.ut.unpack16(src.ptr, 2) & #x8000) ~= 0 // top bit set
      THEN $( negative := TRUE
              G.ut.set32(G.ut.unpack16(src.ptr, 0) NEQV #xFFFF, 
                          G.ut.unpack16(src.ptr, 2) NEQV #xFFFF, number)
              TEST G.ut.unpack16(number, 0) = #xFFFF
                 THEN G.ut.set32(G.ut.unpack16(number, 0),
                                     G.ut.unpack16(number, 2) + 1, number)
                 ELSE G.ut.set32(G.ut.unpack16(number, 0) + 1,
                                     G.ut.unpack16(number, 2), number)
           $)
      ELSE G.ut.mov32(src.ptr, number)  // transfer it as it stands

      FOR j = 11 TO 2 BY -1 // max 10 digits
      $( G.ut.div32( ten, number, fraction )
         out.ptr%(byteoff+j) := fraction!0 + '0'
         digits   := digits + 1
         IF G.ut.cmp32(zero, number) = m.eq THEN BREAK // early exit
      $)

      IF negative THEN out.ptr%(byteoff+11-digits) := '-' // tidy string - add minus sign

      byteoff := byteoff + m.ut.chars32
      src.ptr := src.ptr + 2
   $)
   out.ptr%(m.ut.chars.per.line-1) := m.ut.CR

$)


AND writeit( byte.ptr, byte.size ) = VALOF
$( LET wcb = VEC 6   // write control block

   wcb!0 := G.ut.stream   // file handle
   wcb!1 := byte.ptr // 2nd processor main address  // 05.01.88 MH
   wcb!2 := byte.size     // size in bytes

   osgbpb(m.ut.write.op, wcb)
   resultis (wcb!1 - byte.ptr) = byte.size -> m.ut.success, ~m.ut.success
                 // above updated 05.01.88 MH
$)
.


