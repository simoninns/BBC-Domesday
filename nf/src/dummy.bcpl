/**
         NATIONAL FIND
         -------------

         NF.FIND0 - MAIN ACTION ROUTINE
         ------------------------------

         NAME OF FILE CONTAINING RUNNABLE CODE:

         R.FIND

         REVISION HISTORY:

         DATE     VERSION  AUTHOR      DETAILS OF CHANGE
         11.10.87 23       PAC         Adopted for DISH system

**/

Section "FIND.dummy"

GET "LIBHDR"  
    
GET ":4.DSH.gh.glhd"
GET ":4.DSH.gh.gldyhd"
GET ":4.DSH.gh.glnfhd"
get ":4.DSH.H.vhhd"
get ":4.DSH.H.kdhd"
get ":4.DSH.H.sdhd"
get ":4.DSH.H.sthd"
get ":4.DSH.H.iohd"
get ":4.DSH.H.wmhd"
get ":4.DSH.H.nfhd"

static $( query.done = FALSE $)

manifest $( 

// icon numbers
m.query.box  = 2
m.old.query  = 13 // old query button
m.prev.box   = 20 // previous query box
m.copy.query = 16 // copy query button   
m.reviewbox  = 20 // special box for review state

m.max.query.size = 80 // chars

// icon flags
m.shaded   = 1<<22   // bit 22 set
m.selected = 1<<21
$)


let g.nf.dy.init() be
$(
    G.sc.mess("G.nf.dy.init")
    g.nf.p := GETVEC(m.nf.datasize)
    unless g.ut.restore(g.nf.p,m.nf.datasize,m.io.nfcache) do
    $(  g.nf.p!c.state := s.unset
        g.nf.p!c.good.query := false
        (g.nf.p+p.oldq)%0 := 0
        g.nf.p!c.titlenumber := 0 // -1 means there is a previous item name
        g.nf.p!c.termcount := 0
        for i = 0 to 4 do g.nf.p!(c.include+i) := true
    $)
    g.nf.p!c.index := g.dh.open("-adfs-$.dsh.r.INDEX")
    g.nf.p!c.names := g.dh.open("-adfs-$.dsh.r.NAMES")
//    g.nf.p!c.names := g.dh.open("-adfs-:5.NNAMES")
    $(  let wsize = MAXVEC()
        if wsize > m.nf.max.wsize do wsize := m.nf.max.wsize
        g.nf.p!c.ws := GETVEC(wsize) // establish workspace area
        g.nf.p!c.wssize := wsize+1    // exact number of words in this area
    $)
$)

let g.nf.dy.free() be
$(
    G.sc.mess("g.nf.DY.free")
    g.dh.close(g.nf.p!c.index)
    g.dh.close(g.nf.p!c.names)
    FREEVEC(g.nf.p!c.ws)
    g.ut.cache(g.nf.p,m.nf.datasize,m.io.nfcache)
    FREEVEC(g.nf.p)
$)

LET window.for( state ) = G.states!(state*m.st.esize + m.st.whandle)     

LET g.nf.checkbox() BE   
$(
   // convert the icon number into an index
   //
   let n = valof switchon G.context!m.icon into
           $( case 6 : resultis 2
              case 7 : resultis 3
              case 8 : resultis 4
              default: resultis 0
           $)

   test g.nf.p!(c.include + n) then
   $( let count = 0
      for i = 2 to 4 do if g.nf.p!(c.include + i) count := count + 1
      test count <= 1 
      then $( G.sc.ermess("Cannot omit all types")
              G.wm.Set.Icon.State( G.context!m.window,
                                   G.context!m.icon,
                                   m.selected, 0 ) // reselect it
           $)
      else g.nf.p!(c.include + n) := false   
   $)
   else g.nf.p!(c.include + n) := true
$)

LET get.query(query.addr) BE
$(
   Let str = G.wm.Iconaddr( window.for( m.st.find ), m.query.box )/bytesperword

   $( let l = 0
      while (str%l ~= '*C') do $( query.addr%(l+1) := str%l; l := l+1 $)
      query.addr%0 := l
   $)
$)

LET g.nf.handle.keys() BE
$(
   Let query = G.nf.p+p.q

   get.query(query)

//   UNLESS G.context!m.key = m.kd.return RETURN

   G.wm.message("Handle keys: query is %S",query )

   unless g.nf.makequery(g.nf.p) return

   g.nf.runquery(g.nf.p)

   update.box ( query, m.prev.box )

   G.nf.p!c.termcount := 0

   G.ut.movebytes( query, 0, g.nf.p+p.oldq, 0, query%0+1 )
   g.nf.p!c.good.query := true
   G.wm.set.icon.state( window.for( m.st.find ), m.old.query, 0, m.shaded )

   query.done := TRUE
$)


// copy current query to old query
//
AND update.box ( string, box ) BE
$(
   Let window = window.for( m.st.find )
   Let addr   = G.wm.Iconaddr( window, box )

   G.ut.movebytes( string, 1, 0, addr, string%0 )
   0%(addr+string%0) := '*C'
   G.wm.set.icon.state( window, box,0,0 )
$)

LET g.nf.findini() BE 
$(
   Let old.query = G.nf.p+p.oldq
   Let shade     = 0
   Let null.str  = ""

   G.sc.mess("g.nf.findini")

   query.done := FALSE
   update.box( old.query, m.prev.box )
   update.box( null.str,  m.query.box )

   G.nf.writepc(0)
   G.nf.writepm(0)

   (G.nf.p+p.q)%0 := 0 // query is null

   if (g.nf.p+p.oldq)%0 = 0 | // g.nf.p!c.state = s.unset | 
        (g.nf.p!c.good.query = false) 
   do shade := m.shaded

   G.wm.set.icon.state( window.for( m.st.find ), m.old.query, shade, m.shaded )


   $( let pb = VEC 6

      pb!0,pb!1,pb!4,pb!5 := window.for( m.st.find ), m.query.box, -1, 0
      OsWimpS( m.wm.Set.Caret.Position, pb )
   $)

   g.nf.p!c.state := s.outsidebox
$)

LET g.nf.copy.query() BE 
$(
   Let query = G.nf.p+p.q
   Let oldq  = G.nf.p+p.oldq

   get.query(query)

   test (query%0 + oldq%0) > m.max.query.size then G.sc.beep()
   or
   $(
      G.ut.movebytes( oldq, 1, query, query%0+1, oldq%0 )
      query%0 := query%0 + oldq%0
      update.box( query, m.query.box )
   $)
$)

LET g.nf.find() BE 
$( 
   IF query.done THEN 
   $(
      G.context!m.window := window.for( m.st.find )
      G.context!m.icon   := m.reviewbox // force a change into review state
      G.context!m.key    := 2
   $)
$)

LET g.nf.old.query()     BE G.sc.mess("g.nf.old.query")

LET g.nf.revini       () BE G.sc.mess("g.nf.revini")
LET g.nf.rev.action   () BE G.sc.mess("g.nf.rev.action")

LET g.nf.dialini      () BE G.sc.mess("g.nf.dial.ini")
LET g.nf.dial.action  () BE G.sc.mess("g.nf.dial.action")
LET g.nf.highlight    () BE G.sc.mess("g.nf.highlight")
.
